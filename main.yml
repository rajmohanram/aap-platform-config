---
- name: Launch AAP Job Template
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - "common/vars.yml"

  pre_tasks:
    - name: "Ensure required variables are set"
      ansible.builtin.assert:
        that:
          - env is defined
          - cluster is defined
          - job_template is defined
        fail_msg: "Environment, cluster, and job template must be specified."

    - name: Include cluster environment variables
      ansible.builtin.include_vars:
        file: "environments/{{ env }}/{{ cluster }}/vars.yml"
        name: cluster_vars

    - name: Include job template variables
      ansible.builtin.include_vars:
        file: "environments/{{ env }}/{{ cluster }}/{{ job_template }}.yml"
        name: job_vars

    - name: Set job extra vars
      ansible.builtin.set_fact:
        job_extra_vars: "{{ job_vars | default({}) | combine(cluster_vars | default({})) }}"

  roles:
    - role: infra.aap_configuration.controller_job_launch
      vars:
        controller_launch_jobs:
          - name: "{{ job_template }}"
            organization: "{{ organization }}"
            extra_vars: "{{ job_extra_vars }}"
            wait: true

  post_tasks:
    # - name: Debug job launch result
    #   ansible.builtin.debug:
    #     var: launched_controller_jobs

    - name: Ensure job launch was successful
      ansible.builtin.assert:
        that:
          - launched_controller_jobs.results[0].status == 'successful'
          - launched_controller_jobs.results[0].failed == false
        fail_msg: "{{ job_template | title }} job launch failed or did not complete successfully."
        success_msg: "{{ job_template | title }} job with id '{{ launched_controller_jobs.results[0].id }}' launched and completed successfully."
      when: launched_controller_jobs is defined

    - name: Download job output
      ansible.builtin.uri:
        url: "{{ aap_hostname }}/api/v2/jobs/{{ launched_controller_jobs.results[0].id }}/stdout/?format=html"
        validate_certs: "{{ aap_validate_certs | default(false) }}"
        method: GET
        headers:
          Authorization: "Bearer {{ aap_token }}"
        return_content: true
      register: job_output

    - name: Save job output to file
      ansible.builtin.copy:
        content: "{{ job_output.content }}"
        dest: "{{ job_template }}_{{ launched_controller_jobs.results[0].id }}.html"
        mode: '0644'
      when: job_output is defined and job_output.content is not none
